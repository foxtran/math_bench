#:for prec in bench.INTEGER_PRECISION
module bench_integer_${prec}$
  use, intrinsic :: iso_c_binding, only: C_sizeof
  implicit none
  private
  integer,       parameter :: prec             = ${prec}$
  integer(prec), parameter :: t                = 0_prec
  integer,       parameter :: BYTES_IN_INTEGER = C_sizeof(t)
  integer,       parameter :: ELEMENTS_IN_NKB  = ${bench.CACHE_USAGE}$ * 1024 / BYTES_IN_INTEGER
!DIR$ ATTRIBUTES ALIGN : 64 :: A, B, C
  integer(prec), dimension(ELEMENTS_IN_NKB) :: A, B, C
  character(len=16) :: type
  logical :: initialized = .false.
  public :: A, B, C
  public :: init, get_size, type
#:for intr in bench.INTEGER_HANDS
  public :: b_${intr.replace('.','_')}$
#:endfor
#:for intr in bench.INTEGER_INTRINSICS
  public :: b_${intr}$
#:endfor
#:for intr in bench.INTEGER_INTRINSICS2
  public :: b_${intr}$
#:endfor
contains
  subroutine init
    real(8) :: t(ELEMENTS_IN_NKB)
    if (.not.initialized) then
      A = 0_prec
      call random_number(t)
      B = floor(huge(B(1)) * t)
      where (B == 0)
        B = 1
      end where
      call random_number(t)
      C = floor(t * ${prec}$_prec * 8_prec)
      where (C == 0)
        C = 1
      end where
      write (type, "(A3,I0)") "int", prec * 8
    end if
    initialized = .true.
    call shuffle_Sattolo(B)
    call shuffle_Sattolo(C)
  end subroutine init
  subroutine shuffle_Sattolo(A)
    integer(prec), intent(inout) :: A(ELEMENTS_IN_NKB)
    real(8) :: t
    integer :: i, j
    integer(prec) :: swap
    i = ELEMENTS_IN_NKB
    do i = ELEMENTS_IN_NKB, 1, -1
      call random_number(t)
      j = 1 + floor(dble(i) * t)
      swap = A(i)
      A(i) = A(j)
      A(j) = swap
    end do
  end subroutine shuffle_Sattolo
  integer function get_size()
    get_size = size(A)
  end function get_size
  subroutine b_add_v1(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = A + B
    end do
  end subroutine b_add_v1
  subroutine b_add_v2(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = B + C
    end do
  end subroutine b_add_v2
  subroutine b_add_v3(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = B + 13_prec
    end do
  end subroutine b_add_v3
  subroutine b_mul_v1(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = A * B
    end do
  end subroutine b_mul_v1
  subroutine b_mul_v2(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = B * C
    end do
  end subroutine b_mul_v2
  subroutine b_mul_v3(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = B * 13_prec
    end do
  end subroutine b_mul_v3
  subroutine b_fma_v1(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = A * A + A
    end do
  end subroutine b_fma_v1
  subroutine b_fma_v2(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = A * B + B
    end do
  end subroutine b_fma_v2
  subroutine b_fma_v3(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = A * B + C
    end do
  end subroutine b_fma_v3
  subroutine b_fma_v4(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = B * C + C
    end do
  end subroutine b_fma_v4
  subroutine b_div_v1(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = A / B
    end do
  end subroutine b_div_v1
  subroutine b_div_v2(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = B / C
    end do
  end subroutine b_div_v2
  subroutine b_inv_v1(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = 1_prec / B
    end do
  end subroutine b_inv_v1
  subroutine b_inv_v2_1(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      where (B /= -1 .and. B /= 1)
        A = 0_prec
      elsewhere
        A = B
      end where
    end do
  end subroutine b_inv_v2_1
  subroutine b_inv_v2_2(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      where (B == 1)
        A = 1_prec
      elsewhere (B /= -1)
        A = 1_prec
      elsewhere
        A = 0_prec
      end where
    end do
  end subroutine b_inv_v2_2
  subroutine b_inv_v2_3(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      where (B /= 1)
        A = 0_prec
      elsewhere
        A = B
      end where
    end do
  end subroutine b_inv_v2_3
#:for intr in bench.INTEGER_INTRINSICS
  subroutine b_${intr}$(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = ${intr}$(B)
    end do
  end subroutine b_${intr}$
#:endfor
#:for intr in bench.INTEGER_INTRINSICS2
  subroutine b_${intr}$(repeats)
    integer, intent(in) :: repeats
    integer :: rep
    do rep = 1, repeats
      A = ${intr}$(B, C)
    end do
  end subroutine b_${intr}$
#:endfor
end module bench_integer_${prec}$
#:endfor
